generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channels {
  id               String        @id @default(uuid()) @db.Uuid
  discordChannelId String?       @db.VarChar
  organizationId   String        @db.Uuid
  organizations    Organizations @relation(fields: [organizationId], references: [id], onUpdate: Restrict)

  @@map("channels")
}

model HelpdeskUsers {
  id                 String               @id @default(uuid()) @db.Uuid
  email              String               @db.VarChar
  name               String               @db.VarChar
  locale             String               @db.VarChar
  accessToken        String               @db.VarChar
  refreshToken       String               @db.VarChar
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  updatedAt          DateTime             @updatedAt
  organizations      Organizations?       @relation(fields: [organizationsId], references: [id])
  organizationsId    String?              @db.Uuid
  organizationsUsers OrganizationsUsers[]

  @@map("helpdesk_users")
}

model Organizations {
  id                 String               @id(map: "account_companies_pkey") @db.Uuid
  domain             String               @db.VarChar
  name               String?              @db.VarChar
  helpdeskUsers      HelpdeskUsers[]
  questionSheets     QuestionSheets[]
  channels           Channels[]
  organizationsUsers OrganizationsUsers[]

  @@map("organizations")
}

model OrganizationsUsers {
  organizationId String        @db.Uuid
  organization   Organizations @relation(fields: [organizationId], references: [id])
  helpdeskUserId String        @db.Uuid
  helpdeskUser   HelpdeskUsers @relation(fields: [helpdeskUserId], references: [id])

  @@id([organizationId, helpdeskUserId])
  @@map("organizations_users")
}

model QuestionSheets {
  id             String        @id @default(uuid()) @db.Uuid
  organizationId String        @db.Uuid
  structure      Json          @db.Json
  organizations  Organizations @relation(fields: [organizationId], references: [id], onUpdate: Restrict)
  questions      Questions[]

  @@map("question_sheets")
}

model Questioners {
  id        String      @id(map: "users_pkey") @default(uuid()) @db.Uuid
  email     String      @db.VarChar
  name      String?     @db.VarChar
  questions Questions[]

  @@map("questioners")
}

model Questions {
  id              String         @id @default(uuid()) @db.Uuid
  questionerId    String         @db.Uuid
  content         Json           @db.Json
  questionSheetId String         @db.Uuid
  questionSheets  QuestionSheets @relation(fields: [questionSheetId], references: [id], onUpdate: Restrict)
  questioners     Questioners    @relation(fields: [questionerId], references: [id], onUpdate: Restrict)

  @@map("questions")
}
